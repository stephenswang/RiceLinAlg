<document>

<div class="navigation">



</div>

<div><p>
<course number="Test" display_name="Test LinAlg" attrib_string="semester=&quot;2018_Summer&quot; info_sidebar_name=&quot;Other Documents&quot; start=&quot;2018-01-11T12:00&quot; end=&quot;2019-12-18T18:00&quot; course_image=&quot;rice-logo.jpg&quot; display_coursenumber=&quot;TestLinAlg&quot; course_organization=&quot;TestRice&quot; graceperiod=&quot;1800 seconds&quot; invitation_only=&quot;true&quot; allow_anonymous=&quot;false&quot; mobile_available=&quot;true&quot; org=&quot;Rice&quot;"><p>
<chapter display_name="Basis and Dimension" attrib_string="url_name=&quot;block3&quot; start=&quot;2018-01-11T16:00&quot;" linenum="75" tex_filename="testcourse2.tex" refnum="1"><p>
<sequential display_name="Homework 1" attrib_string="due=&quot;2019-12-13T14:15&quot; graded=&quot;true&quot; format=&quot;Exercises&quot; url_name=&quot;hw1-sequential&quot;" linenum="93" tex_filename="testcourse2.tex" refnum="1"><p>
<vertical display_name="Page One" attrib_string="url_name=&quot;hw1-vertical1&quot;" refnum="1"><p>
<html display_name="Row-Reduction Tools" attrib_string="url_name=&quot;hw1-tab1-text1&quot;" linenum="5" tex_filename="./hw/hw1.tex"><p>
For this homework, you should feel free to use technology to do row reduction of matrices. All other computations should still be done by hand, for now. </p><p>
Here are a couple of websites that will do row reduction for you: </p><p>
<a href="https://tinyurl.com/3xr6ed" target="_blank">Linear Algebra Toolkit</a>
 </p><p>
<a href="https://www.wolframalpha.com/" target="_blank">Wolfram Alpha</a>
 </p></html></p></vertical>   </p><p>
<vertical display_name="Homework Page 1" attrib_string="url_name=&quot;hw1-vertical2&quot;" refnum="2"><p>
<problem display_name="Parabola" attrib_string="url_name=&quot;hw1-tab2-problem1&quot; showanswer=&quot;finished&quot; attempts=&quot;3&quot; rerandomize=&quot;per_student&quot;" linenum="26" tex_filename="./hw/hw1.tex"><text><p>
Is there a quadratic equation of the form [mathjaxinline]y = a + bx + cx^2[/mathjaxinline] satisfied by the four points [mathjaxinline](-2,11), (0,4), (1,2),[/mathjaxinline] and [mathjaxinline](2,1)[/mathjaxinline]? </p><p>
Enter the correct formula in the form a + b*x + c*x^2 (either exactly or to two decimal places). Remember to use * for multiplication. If there is no such equation, enter the number 0. </p><p>
<p style="display:inline">[mathjaxinline]y=[/mathjaxinline] </p> <formularesponse inline="1" type="cs" samples="x@1:5#5" answer="4-2.5*x+0.5*x^2">
  <formulaequationinput inline="1">
    <responseparam type="tolerance" default=".01"/>
  </formulaequationinput>
</formularesponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"></font></solution></p></text></problem></p><p>
<problem display_name="Parabola 2" attrib_string="url_name=&quot;hw1-tab2-problem2&quot; showanswer=&quot;finished&quot; attempts=&quot;3&quot; rerandomize=&quot;per_student&quot;" linenum="44" tex_filename="./hw/hw1.tex"><text><p>
Is there a quadratic equation of the form [mathjaxinline]y = a + bx + cx^2[/mathjaxinline] satisfied by the four points [mathjaxinline](-2,11), (0,4), (1,2),[/mathjaxinline] and [mathjaxinline](3,0)[/mathjaxinline]? </p><p>
Enter the correct formula in the form [mathjaxinline]a + b*x + c*x^2[/mathjaxinline], either exactly or to two decimal places. (Remember to use * for multiplication.) If there is no such equation, enter the number 0. </p><p>
<p style="display:inline">[mathjaxinline]y=[/mathjaxinline] </p> <formularesponse inline="1" type="cs" samples="x@1:5#5" answer="0">
  <formulaequationinput inline="1">
    <responseparam type="tolerance" default=".01"/>
  </formulaequationinput>
</formularesponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"></font></solution></p></text></problem></p><p>
<problem display_name="Plate Temperature" attrib_string="url_name=&quot;hw1-tab2-problem3&quot; showanswer=&quot;finished&quot; attempts=&quot;3&quot; rerandomize=&quot;per_student&quot;" linenum="61" tex_filename="./hw/hw1.tex"><text><p>
An elliptical metal plate is shown below. We can measure the temperature at six points along its edge. </p><center> <edxxml><img src="/static/images/h1plate.svg" width="450 px" style="margin: 10px 25px 25px 25px; border:0px" /></edxxml> </center><p>
We wish to determine the temperature at some internal points, labelled A, B, C, D. Assuming that the temperature at each of the points is the average of the temperatures at its four neighboring points (as given by the dotted lines), set up a system of linear equations for the temperatures, and then solve it. </p><p>
<p style="display:inline">[mathjaxinline]A=[/mathjaxinline] </p> <numericalresponse inline="1" answer="8">
  <textline inline="1">
    <responseparam type="tolerance" default=".01"/>
  </textline>
</numericalresponse> </p><p>
<p style="display:inline">[mathjaxinline]B=[/mathjaxinline] </p> <numericalresponse inline="1" answer="12">
  <textline inline="1">
    <responseparam type="tolerance" default=".01"/>
  </textline>
</numericalresponse> </p><p>
<p style="display:inline">[mathjaxinline]C=[/mathjaxinline] </p> <numericalresponse inline="1" answer="9">
  <textline inline="1">
    <responseparam type="tolerance" default=".01"/>
  </textline>
</numericalresponse> </p><p>
<p style="display:inline">[mathjaxinline]D=[/mathjaxinline] </p> <numericalresponse inline="1" answer="10">
  <textline inline="1">
    <responseparam type="tolerance" default=".01"/>
  </textline>
</numericalresponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"></font></solution></p></text></problem></p></vertical>   </p><p>
<vertical display_name="Homework Page 2" attrib_string="url_name=&quot;hw1-vertical3&quot;" refnum="3"><p>
<problem display_name="Traffic" attrib_string="url_name=&quot;hw1-tab3-problem1&quot; showanswer=&quot;finished&quot; attempts=&quot;5&quot; rerandomize=&quot;per_student&quot;" linenum="120" tex_filename="./hw/hw1.tex"><text><p>
A set of roads and intersections is shown below. The rate of cars per hour is shown for some roads. Assume that at each of the six intersections, the flow of traffic into the intersection equals the flow of traffic out of the intersection. This gives a set of linear equations in the seven unknown traffic rates. </p><center> <edxxml><img src="/static/images/h1traffic.svg" width="450 px" style="margin: 10px 25px 25px 25px; border:0px" /></edxxml> </center><p>
Solve the system in full generality. Assuming that all rates are non-negative, what is the minimum possible value of [mathjaxinline]x_7[/mathjaxinline]? </p><p>
<numericalresponse answer="60">
  <textline>
    <responseparam type="tolerance" default=".01"/>
  </textline>
</numericalresponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"></font></solution></p></text></problem></p></vertical>   </p><p>
<vertical display_name="Homework Page 3" attrib_string="url_name=&quot;hw1-vertical4&quot;" refnum="4"><p>
<problem display_name="Cube to Identity" attrib_string="url_name=&quot;hw1-tab4-problem1&quot; showanswer=&quot;finished&quot; attempts=&quot;7&quot; rerandomize=&quot;per_student&quot;" linenum="148" tex_filename="./hw/hw1.tex"><text><p>
Find a [mathjaxinline]2\times 2[/mathjaxinline] matrix [mathjaxinline]A[/mathjaxinline] which is not the identity matrix, but which has the property that [mathjaxinline]A^3 = I_2[/mathjaxinline]. Enter your answer to within two decimal places. </p><p>
(Hint: Don't try to solve for the entries of [mathjaxinline]A[/mathjaxinline] with algebra. Think about what you might want [mathjaxinline]A[/mathjaxinline] to do geometrically first.) </p><script linenum="2" filename="./checkcube.tex" type="text/python" system_path="python_lib">
def cubing(expect,ans):
    import ast
    import numpy as np
    res={'ok':False}
    if MatrixEntry(expect,ans)['ok']!=True:
        res['msg']=(MatrixEntry(expect,ans))['msg']
    else:
        hold=np.array(eval(ans))
        mat=hold
        I=np.identity(2)
        mat_c=np.linalg.matrix_power(mat,3)
        diff1=np.subtract(mat_c,I)
    
        adiff1=np.absolute(diff1)
        check1=(adiff1&gt;0.02).any()
        diff2=np.subtract(mat,I)
        adiff2=np.absolute(diff2)
        check2=(adiff2&gt;0.01).any()
    

        if check2==False:
            res['msg']='Answer too close to the identity'
            
        elif check1==True:
            res['msg']='Answer does not cube to the identity'
            
        else:
            res['ok']=True
    return res
  
def MatrixEntry(expect, ans):
    import ast
    import numpy as np
    ret= {'ok':False}
    
    
    try:
        list_ans = ast.literal_eval(ans)
        list_expect = ast.literal_eval(expect)
        matrix_ans = np.matrix(list_ans)
        matrix_expect = np.matrix(list_expect)
        if matrix_ans.shape != matrix_expect.shape:
            ret['msg'] = 'Wrong shape of matrix'
        
        else:
            ret['ok'] = True
    except SyntaxError:
        ret['msg'] = 'Wrong input format'
    return ret
</script><p>
<customresponse cfn="cubing" expect="[[-0.5,-0.866],[0.866,-0.5]]">
  <textline correct_answer="[[-0.5,-0.866],[0.866,-0.5]]"/>
</customresponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"></font></solution></p></text></problem></p><p>
<problem display_name="Find a Solution Set" attrib_string="url_name=&quot;hw1-tab4-problem2&quot; showanswer=&quot;finished&quot; attempts=&quot;1&quot; rerandomize=&quot;per_student&quot;" linenum="169" tex_filename="./hw/hw1.tex"><text><p>
Let </p><table id="a0000000002" class="equation" width="100%" cellspacing="0" cellpadding="7">
<tr>
    <td class="equation">[mathjax]A = \left[ \begin{array}{cccc} 1 &amp;  1 &amp;  0 &amp;  -1\\ 5 &amp;  6 &amp;  -1 &amp;  1 \end{array} \right].[/mathjax]</td>
</tr>
</table><p>
 Find a list of vectors whose span is the set of solutions to [mathjaxinline]Ax = \mathbf{0}[/mathjaxinline]. </p><p>
Enter the list of vectors below, separated by semicolons. For instance, to enter the list [mathjaxinline]\left\{ \left[\begin{array}{c} 1 \\ 0 \\ 1 \end{array} \right]; \left[\begin{array}{c} 1 \\ 2 \\ 3 \end{array} \right] \right\}[/mathjaxinline], type &lt;1,0,1&gt;;&lt;1,2,3&gt;. </p><script linenum="2" filename="./solutionsetcheck.tex" type="text/python" system_path="python_lib">

def VectorEntry(ans):
    import numpy as np
    import ast
    test={'ok':False}
    try:
        ans=ans.split(";")
        hold=[]
        for a in ans:
            a=a.split(",")
            sub=[]
            for i in range(len(a)):
                if i==0:
                    sub.append(float(a[i][1:]))
                elif i==len(a)-1:
                    sub.append(float(a[i][:-1]))
                else:
                    sub.append(float(a[i]))
            assert len(sub)==4
            hold.append(np.array(sub))
        test['ok']=True
    except AssertionError:
        test['msg']='One of your vectors is not a 4-tuple'
    except:
        test['msg']='Wrong input format'
    return test  
def span2(a,b):
    import numpy as np
    import ast
    non=np.nonzero(a)
    first=non[0][0]
    den=a[first]
    num=b[first]
    quot=num//den
    if np.array_equal(np.multiply(a,quot),b):
        return(-1)
    else:
        return(1)
        
def spangrader(expect,ans):
    import numpy as np
    import ast
    mata=np.array([[1,1,0,-1],[5,6,-1,1]])
    res={'ok':False}
    if VectorEntry(ans)['ok']!=True:
        return(VectorEntry(ans))
    else:
        ans=ans.split(";")
        hold=[]
        for a in ans:
            a=a.split(",")
            sub=[]
            for i in range(len(a)):
                if i==0:
                    sub.append(float(a[i][1:]))
                elif i==len(a)-1:
                    sub.append(float(a[i][:-1]))
                else:
                    sub.append(float(a[i]))
            hold.append(np.array(sub))
        check_len=True
        check_zero=True
        check_lin=False
        veco=np.array([0,0,0,0])
        new=[]
        for item in hold:
            mul=np.dot(mata,item)
            if np.array_equal(np.dot(mata,item),np.array([0,0])) and not np.array_equal(item,veco):
                new.append(item)
            elif not np.array_equal(np.dot(mata,item),np.array([0,0])):
                check_zero=False
                res['msg']='At least one of the vectors is not in the null space of A'
        if len(new)==1 or len(new)==0 and check_zero==True:
            res['msg']='The set of vectors given does not span the nullspace of A'
        else:
            for i in range(len(new)-1):
                for j in range(i+1,len(new)):
                    if span2(new[i],new[j])==1:
                        check_lin=True
                        break
            if check_lin==True:
                res['ok']=True
            elif check_zero==True and len(new)&gt;=2:
                res['msg']='No pair of linearly independent vectors found'
        return res

</script><p>
<customresponse cfn="spangrader" expect="&amp;lt;-1,1,1,0&amp;gt;;&amp;lt;7,-6,0,1&amp;gt;">
  <textline correct_answer="&amp;lt;-1,1,1,0&amp;gt;;&amp;lt;7,-6,0,1&amp;gt;"/>
</customresponse> </p><p>
<solution><font color="blue">Answer: </font><font color="blue"><p>
 We row reduce the matrix [mathjaxinline]A[/mathjaxinline]: <br /><br />[mathjaxinline]\left[ \begin{array}{cccc} 1 &amp;  1 &amp;  0 &amp;  -1 \\ 5 &amp;  6 &amp;  -1 &amp;  1 \end{array} \right][/mathjaxinline] <br /><br />Multiply the first row by -5, and add this to the second: <br /><br />[mathjaxinline]\left[ \begin{array}{cccc} 1 &amp;  1 &amp;  0 &amp;  -1 \\ 0 &amp;  1 &amp;  -1 &amp;  6 \end{array} \right][/mathjaxinline] <br /><br />Multiply the second row by -1, and add this to the first: <br /><br />[mathjaxinline]\left[ \begin{array}{cccc} 1 &amp;  0 &amp;  1 &amp;  -7 \\ 0 &amp;  1 &amp;  -1 &amp;  6 \end{array} \right][/mathjaxinline] <br /><br />Ordinarily, to solve a matrix equation, we would row reduce an augmented matrix, with the vector from the right hand side of the equation as the last column of the matrix. However, since the right hand side of the equation is the zero vector, row operations would have no effect on it. This tells us that if [mathjaxinline]A'[/mathjaxinline] is the row-reduced version of [mathjaxinline]A[/mathjaxinline], then the set of solutions to [mathjaxinline]Ax = \mathbf{0}[/mathjaxinline] is the same as the set of solutions to [mathjaxinline]A'x = \mathbf{0}[/mathjaxinline].<br />We have 2 free variables; call them [mathjaxinline]x_3[/mathjaxinline] and [mathjaxinline]x_4[/mathjaxinline]. We can get solutions to our equation by choosing any values we like for [mathjaxinline]x_3[/mathjaxinline] and [mathjaxinline]x_4[/mathjaxinline], substituting, and solving for [mathjaxinline]x_1[/mathjaxinline] and [mathjaxinline]x_2[/mathjaxinline]. We get [mathjaxinline]x_1 = -x_3 + 7x_4[/mathjaxinline] and [mathjaxinline]x_2 = x_3 - 6x_4[/mathjaxinline]. </p><p>
Hence the general solution is </p><table id="a0000000003" class="equation" width="100%" cellspacing="0" cellpadding="7">
<tr>
    <td class="equation">[mathjax]\left[ \begin{array}{c} x_1 \\ x_2 \\ x_3 \\ x_4 \end{array}\right] = \left[ \begin{array}{c} -x_3 + 7x_4 \\ x_3 - 6x_4 \\ x_3 \\ x_4 \end{array}\right] = x_3 \left[ \begin{array}{c} -1 \\ 1 \\ 1 \\ 0 \end{array}\right] + x_4 \left[ \begin{array}{c} 7 \\ - 6 \\ 0 \\ 1 \end{array}\right],[/mathjax]</td>
</tr>
</table><p>
 for any [mathjaxinline]x_3,x_4 \in \mathbb R[/mathjaxinline]. Hence the set of solutions is the span of [mathjaxinline]\left\{  \left[ \begin{array}{c} -1 \\ 1 \\ 1 \\ 0 \end{array} \right]; \left[ \begin{array}{c} 7 \\ -6 \\ 0 \\ 1 \end{array} \right]\right\} .[/mathjaxinline] </p><p>
(Note that this is not the only list that spans the solution set, but it is the one that is simplest to find.) </p></font></solution></p></text></problem></p></vertical>   </p></sequential> </p></chapter> </p></course> </p></div>





<div class="navigation">



</div>

</document>